@use 'sass:color';
@use 'sass:list';
@use 'sass:math';

@use 'variable' as *;


@function f_clamp($value, $min: $min-linear, $max: $max-linear) {
  @return math.min(math.max($value, $min), $max);
}


@function linear_individual($input) {
  $value                          : f_clamp(($input / $max-rgb));
  $condition                      : ($value <= $gamma-expanded);
  $true                           : ($value / $standard-phi);
  $false                          : (math.pow(($value + $alpha-min) / $alpha-max, $linear-gamma));

  @return if($condition, $true, $false);
}


@function linear($color) {
  $red                            : linear_individual(color.red($color));
  $green                          : linear_individual(color.green($color));
  $blue                           : linear_individual(color.blue($color));

  @return $red, $green, $blue;
}


@function get_luminance($color) {
  $red                            : (list.nth(linear($color), 1) * $linear-red);
  $green                          : (list.nth(linear($color), 2) * $linear-green);
  $blue                           : (list.nth(linear($color), 3) * $linear-blue);
  $luminance                      : f_clamp($red + $green + $blue);

  @return $luminance;
}


@function contrast_ratio($color-a, $color-b) {
  $sum                            : f_clamp($max-linear / 20);
  $luminance-a                    : get_luminance($color-a);
  $luminance-b                    : get_luminance($color-b);
  $get-max                        : (math.max($luminance-a, $luminance-b) + $sum);
  $get-min                        : (math.min($luminance-a, $luminance-b) + $sum);
  $contrast-ratio                 : f_clamp(($get-max / $get-min), $min-accessibility, $max-accessibility);

  @return $contrast-ratio;
}
