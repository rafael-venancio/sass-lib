// Built-in
@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';

// Local
@use 'variable' as var;


@function color-clamp($val, $min: var.$min-linear, $max: var.$max-linear) {
  //@debug var.$separator-line;
  //@debug 'Clamp function says:';
  //@debug 'I guarantee that the value passed (#{$val}) will not be less than #{$min} or greater than #{$max}';
  //@debug '';
  @return math.min(math.max($val, $min), $max);
}


@function r($color) {
  @return color.red($color);
}


@function g($color) {
  @return color.green($color);
}


@function b($color) {
  @return color.blue($color);
}


@function linear-alone($val) {
  $val : color-clamp($val / var.$max-rgb);
  $c : ($val < var.$gamma-expanded);
  $t : ($val / var.$standard-phi);
  $f : (math.pow((($val + var.$min-alpha) / var.$max-alpha), var.$linear-gamma));

  @return if($c, $t, $f);
}


@function gamma-alone($val) {
  $c : ($val > var.$gamma-compressed);
  $t : (var.$max-alpha * (math.pow($val, (1 / var.$linear-gamma)) - var.$min-alpha));
  $f : (var.$standard-phi * $val);

  @return if($c, $t, $f);
}


@function linear($color) {
  $r : color-clamp(linear-alone(r($color)));
  $g : color-clamp(linear-alone(g($color)));
  $b : color-clamp(linear-alone(b($color)));

  @return $r, $g, $b;
}


@function color-xyz($color) {
  $mn : 100;
  $var-r : (color-clamp(linear-alone(r($color))) * 100);
  $var-g : (color-clamp(linear-alone(g($color))) * 100);
  $var-b : (color-clamp(linear-alone(b($color))) * 100);

  $x : ($var-r * var.$linear-srgb-x-red) + ($var-g * var.$linear-srgb-x-green) + ($var-b * var.$linear-srgb-x-blue);
  $y : ($var-r * var.$linear-srgb-y-red) + ($var-g * var.$linear-srgb-y-green) + ($var-b * var.$linear-srgb-y-blue);
  $z : ($var-r * var.$linear-srgb-z-red) + ($var-g * var.$linear-srgb-z-green) + ($var-b * var.$linear-srgb-z-blue);

  @return $x, $y, $z;
}


@function xyz-color($xyz) {
  $x : list.nth($xyz, 1);
  $y : list.nth($xyz, 2);
  $z : list.nth($xyz, 3);

  $x : $x / 100;
  $y : $y / 100;
  $z : $z / 100;

  $r : (($x * var.$linear-x-p3-r) + ($y * var.$linear-y-p3-r) + ($z * var.$linear-z-p3-r));
  $g : (($x * var.$linear-x-p3-g) + ($y * var.$linear-y-p3-g) + ($z * var.$linear-z-p3-g));
  $b : (($x * var.$linear-x-p3-b) + ($y * var.$linear-y-p3-b) + ($z * var.$linear-z-p3-b));

  $r : gamma-alone($r);
  $g : gamma-alone($g);
  $b : gamma-alone($b);

  $r : color-clamp(($r * var.$max-rgb), var.$min-rgb, var.$max-rgb);
  $g : color-clamp(($g * var.$max-rgb), var.$min-rgb, var.$max-rgb);
  $b : color-clamp(($b * var.$max-rgb), var.$min-rgb, var.$max-rgb);

  $r : math.floor($r);
  $g : math.round($g);
  $b : math.ceil($b);

  @return $r, $g, $b;
}


@debug xyz-color(color-xyz(var.$color-demo));